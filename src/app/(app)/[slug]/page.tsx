/* THIS FILE WAS AUTOGENERATED BY CLUTCH. DO NOT EDIT. */
import cx from "classnames";
import { getPostBySlug as getPostBySlugFn } from "../../../../node_modules/@clutch-marketplace/clutch.wordpress/dist/queries/posts";
import * as pluginHook from "../../../../node_modules/@clutch-marketplace/clutch.wordpress/dist/clutch.hooks.js";
import ApplyHooks from "../../../clutch/components/ClutchApplyHooks";
import ClutchRichText from "../../../clutch/components/ClutchRichText";
import { serialize, parseSearchParams } from "../../_debug/helpers";
import { DebugReports, DebugInstance, DebugInstanceErrorWrapper } from "../../_debug/components";
import styles from "./styles.module.css";
const pagePath = "/[slug]";
const pageSettings = {
  "wpTemplate": {
    "type": "post-type",
    "name": "page",
    "template": "SINGLE_ANY",
    "slug": "jeter"
  },
  "pluginControlled": "@clutch-marketplace/clutch.wordpress"
};
const cltPluginsHooks = [
    pluginHook.HookPage
].filter(Boolean);
export default async function Page({
    params,
    searchParams,
    ...props
}) {
    const [
        datagetPostBySlug
    ] = await Promise.all([
        getPostBySlugFn("page", params?.slug?.toString())
    ]);
    const vars = {
        "1_405": {
            getPostBySlug: datagetPostBySlug
        }
    };
    const reports = [
        {
            type: 0,
            vars: serialize(vars),
            props: serialize({
                ...props,
                params: await params,
                searchParams: parseSearchParams(await searchParams)
            })
        }
    ];
    return (<ApplyHooks hooks={cltPluginsHooks} vars={vars["1_405"]} pagePath={pagePath} pageSettings={pageSettings}>{(pluginsVars)=>{
        const newVars = {
            "1_405": {
                ...pluginsVars
            }
        };
        const prevVars = vars;
        {
            const vars = {
                ...prevVars,
                ...newVars
            };
            reports[0]["vars"] = serialize(newVars);
            return (<DebugReports debug-reports={reports} debug-stop debug-id="1_405"><DebugInstance debug-id="1_405"><div data-d="1_405" className={cx(styles.clt_1_405, "clt_1_405")}><DebugInstanceErrorWrapper data-d="1_405#1_408"><header debug-is-section="true" className={cx(styles.clt_1_408, "clt_1_408", "section", "wrapper")} data-d="1_405#1_408"><DebugInstanceErrorWrapper data-d="1_408#1_409"><div className={cx(styles.clt_1_409, "clt_1_409", "container")} data-d="1_408#1_409"><DebugInstanceErrorWrapper data-d="1_409#1_410"><div className={cx(styles.clt_1_410, "clt_1_410")} data-d="1_409#1_410"><DebugInstanceErrorWrapper data-d="1_410#1_411"><ClutchRichText tag="h1" className={cx(styles.clt_1_411, "clt_1_411")} data-d="1_410#1_411">{vars?.["1_405"]?.getPostBySlug?.title}</ClutchRichText></DebugInstanceErrorWrapper><DebugInstanceErrorWrapper data-d="1_410#1_412"><ClutchRichText tag="p" className={cx(styles.clt_1_412, "clt_1_412", "large")} data-d="1_410#1_412">{vars?.["1_405"]?.getPostBySlug?.content}</ClutchRichText></DebugInstanceErrorWrapper></div></DebugInstanceErrorWrapper></div></DebugInstanceErrorWrapper></header></DebugInstanceErrorWrapper></div></DebugInstance></DebugReports>);
        }
    }}</ApplyHooks>);
}

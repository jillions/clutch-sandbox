/* THIS FILE WAS AUTOGENERATED BY CLUTCH. DO NOT EDIT. */
import { isDefined, isNotDefined, isEqual, isNotEqual, isTruthy, isFalsy, negate, or, and } from "../../../helpers/utils.ts";
import { range, replicate, prepend, prependAll, append, appendAll, isEmptyArray, isNonEmptyArray, length, get, head, tail, take, takeRight, takeWhile, drop, dropRight, dropWhile, findFirstIndex, findLastIndex, findFirst, findLast, insertAt, replace, modify, remove, reverse, sort, zip, unzip, intersperse, rotate, contains, splitAt, split, splitWhere, pad, chunksOf, map, flatMap, flatten, filterMap, filter, partition, reduce, reduceRight, every, some, dedupeWith, dedupe, dedupeAdjacentWith, dedupeAdjacent, join } from "@clutch-marketplace/clutch.functions/dist/functions/array.js";
import { isDefined as isDefined1, isNotDefined as isNotDefined1, isEqual as isEqual1, isNotEqual as isNotEqual1, isTruthy as isTruthy1, isFalsy as isFalsy1, negate as negate1, or as or1, and as and1, conditionalReturn } from "@clutch-marketplace/clutch.functions/dist/functions/conditions.js";
import { parseToDate, now, distance, min, max, greaterThan, greaterThanOrEqualTo, lessThan, lessThanOrEqualTo, between, isPast, isFuture, add, subtract, startOf, endOf, nearest, format, formatLocal, formatUtc, formatIso, formatIsoDate, formatIsoDateUtc, formatIsoOffset, formatIsoZoned, getDay, getMonth, getYear, getHours, getMinutes, getSeconds, getMilliseconds } from "@clutch-marketplace/clutch.functions/dist/functions/date-time.js";
import { sum, subtract as subtract1, multiply, divide, remainder, abs, round, greaterThan as greaterThan1, lessThan as lessThan1, lessThanOrEqualTo as lessThanOrEqualTo1, greaterThanOrEqualTo as greaterThanOrEqualTo1, equals } from "@clutch-marketplace/clutch.functions/dist/functions/number.js";
import { concat, toUpperCase, toLowerCase, capitalize, uncapitalize, replace as replace1, trim, trimStart, trimEnd, slice, isEmpty, isNonEmpty, length as length1, split as split1, includes, startsWith, endsWith, charCodeAt, substring, at, codePointAt, indexOf, lastIndexOf, localeCompare, match, matchAll, normalize, padEnd, padStart, repeat, replaceAll, search, toLocaleLowerCase, toLocaleUpperCase, takeLeft, takeRight as takeRight1, snakeToCamel, snakeToPascal, snakeToKebab, camelToSnake, pascalToSnake, kebabToSnake, isLineBreak } from "@clutch-marketplace/clutch.functions/dist/functions/string.js";
export const helpers = {
    "LOCAL": {
        "1488_445": {
            "isDefined": isDefined,
            "isNotDefined": isNotDefined,
            "isEqual": isEqual,
            "isNotEqual": isNotEqual,
            "isTruthy": isTruthy,
            "isFalsy": isFalsy,
            "negate": negate,
            "or": or,
            "and": and
        }
    },
    "@clutch-marketplace/clutch.functions": {
        "/dist/functions/array.ts": {
            "range": range,
            "replicate": replicate,
            "prepend": prepend,
            "prependAll": prependAll,
            "append": append,
            "appendAll": appendAll,
            "isEmptyArray": isEmptyArray,
            "isNonEmptyArray": isNonEmptyArray,
            "length": length,
            "get": get,
            "head": head,
            "tail": tail,
            "take": take,
            "takeRight": takeRight,
            "takeWhile": takeWhile,
            "drop": drop,
            "dropRight": dropRight,
            "dropWhile": dropWhile,
            "findFirstIndex": findFirstIndex,
            "findLastIndex": findLastIndex,
            "findFirst": findFirst,
            "findLast": findLast,
            "insertAt": insertAt,
            "replace": replace,
            "modify": modify,
            "remove": remove,
            "reverse": reverse,
            "sort": sort,
            "zip": zip,
            "unzip": unzip,
            "intersperse": intersperse,
            "rotate": rotate,
            "contains": contains,
            "splitAt": splitAt,
            "split": split,
            "splitWhere": splitWhere,
            "pad": pad,
            "chunksOf": chunksOf,
            "map": map,
            "flatMap": flatMap,
            "flatten": flatten,
            "filterMap": filterMap,
            "filter": filter,
            "partition": partition,
            "reduce": reduce,
            "reduceRight": reduceRight,
            "every": every,
            "some": some,
            "dedupeWith": dedupeWith,
            "dedupe": dedupe,
            "dedupeAdjacentWith": dedupeAdjacentWith,
            "dedupeAdjacent": dedupeAdjacent,
            "join": join
        },
        "/dist/functions/conditions.ts": {
            "isDefined": isDefined1,
            "isNotDefined": isNotDefined1,
            "isEqual": isEqual1,
            "isNotEqual": isNotEqual1,
            "isTruthy": isTruthy1,
            "isFalsy": isFalsy1,
            "negate": negate1,
            "or": or1,
            "and": and1,
            "conditionalReturn": conditionalReturn
        },
        "/dist/functions/date-time.ts": {
            "parseToDate": parseToDate,
            "now": now,
            "distance": distance,
            "min": min,
            "max": max,
            "greaterThan": greaterThan,
            "greaterThanOrEqualTo": greaterThanOrEqualTo,
            "lessThan": lessThan,
            "lessThanOrEqualTo": lessThanOrEqualTo,
            "between": between,
            "isPast": isPast,
            "isFuture": isFuture,
            "add": add,
            "subtract": subtract,
            "startOf": startOf,
            "endOf": endOf,
            "nearest": nearest,
            "format": format,
            "formatLocal": formatLocal,
            "formatUtc": formatUtc,
            "formatIso": formatIso,
            "formatIsoDate": formatIsoDate,
            "formatIsoDateUtc": formatIsoDateUtc,
            "formatIsoOffset": formatIsoOffset,
            "formatIsoZoned": formatIsoZoned,
            "getDay": getDay,
            "getMonth": getMonth,
            "getYear": getYear,
            "getHours": getHours,
            "getMinutes": getMinutes,
            "getSeconds": getSeconds,
            "getMilliseconds": getMilliseconds
        },
        "/dist/functions/number.ts": {
            "sum": sum,
            "subtract": subtract1,
            "multiply": multiply,
            "divide": divide,
            "remainder": remainder,
            "abs": abs,
            "round": round,
            "greaterThan": greaterThan1,
            "lessThan": lessThan1,
            "lessThanOrEqualTo": lessThanOrEqualTo1,
            "greaterThanOrEqualTo": greaterThanOrEqualTo1,
            "equals": equals
        },
        "/dist/functions/string.ts": {
            "concat": concat,
            "toUpperCase": toUpperCase,
            "toLowerCase": toLowerCase,
            "capitalize": capitalize,
            "uncapitalize": uncapitalize,
            "replace": replace1,
            "trim": trim,
            "trimStart": trimStart,
            "trimEnd": trimEnd,
            "slice": slice,
            "isEmpty": isEmpty,
            "isNonEmpty": isNonEmpty,
            "length": length1,
            "split": split1,
            "includes": includes,
            "startsWith": startsWith,
            "endsWith": endsWith,
            "charCodeAt": charCodeAt,
            "substring": substring,
            "at": at,
            "codePointAt": codePointAt,
            "indexOf": indexOf,
            "lastIndexOf": lastIndexOf,
            "localeCompare": localeCompare,
            "match": match,
            "matchAll": matchAll,
            "normalize": normalize,
            "padEnd": padEnd,
            "padStart": padStart,
            "repeat": repeat,
            "replaceAll": replaceAll,
            "search": search,
            "toLocaleLowerCase": toLocaleLowerCase,
            "toLocaleUpperCase": toLocaleUpperCase,
            "takeLeft": takeLeft,
            "takeRight": takeRight1,
            "snakeToCamel": snakeToCamel,
            "snakeToPascal": snakeToPascal,
            "snakeToKebab": snakeToKebab,
            "camelToSnake": camelToSnake,
            "pascalToSnake": pascalToSnake,
            "kebabToSnake": kebabToSnake,
            "isLineBreak": isLineBreak
        }
    }
};

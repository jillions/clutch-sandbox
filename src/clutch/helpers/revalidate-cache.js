/* THIS FILE WAS AUTOGENERATED BY CLUTCH. DO NOT EDIT. */
  'use server';
  import {join} from 'path';
  import {readdirSync, readFileSync, existsSync} from 'fs';
  import {revalidateTag, revalidatePath} from 'next/cache';
  
  export const getAppPages = async () => ['/', '/[slug]'];
  
  export const getAllTags = async () => {
    const tags = [];
  
    try {
      const fetchCacheDir = join(process.env.PWD, '.next/cache/fetch-cache');
  
      readdirSync(fetchCacheDir).forEach((file) => {
        if (file === 'tags-manifest.json') return;
  
        const cacheFileContent = readFileSync(join(fetchCacheDir, `${file}`), 'utf-8');
        const cacheFile = JSON.parse(cacheFileContent);
        cacheFile?.tags && tags.push(...cacheFile?.tags);
      });
  
      const tagsManifestDir = join(fetchCacheDir, 'tags-manifest.json');
  
      if (!existsSync(tagsManifestDir)) return tags;
  
      const tagsManifestContent = readFileSync(tagsManifestDir, 'utf-8');
      const tagsManifest = JSON.parse(tagsManifestContent);
      tags.push(...Object.keys(tagsManifest?.items || {}));
    } catch (e) {
      console.error('Error reading tags manifest', e);
    } finally {
      return tags;
    }
  }
  
  async function revalidateCache(_tags, _paths) {
    let tags = _tags;
    let paths = _paths;
  
    if (!tags && !paths) {
      tags = await getAllTags();
      paths = await getAppPages();
    }

    tags?.forEach(tag => revalidateTag(tag));
    paths?.forEach(path => revalidatePath(path));
  }
    
  export default revalidateCache;